generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String            @id @default(cuid())
    name             String?
    email            String?           @unique
    emailVerified    DateTime?
    image            String?
    isAdmin          Boolean?          @default(false)
    accounts         Account[]
    sessions         Session[]
    settings         UserSettings?
    fuelTransactions FuelTransaction[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model UserSettings {
    id        String   @id @default(cuid())
    userId    String
    theme     String   @default("system")
    language  String   @default("en")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

model FuelTransaction {
    id        String   @id @default(cuid())
    userId    String
    amount    Decimal
    date      DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
    id               Int            @id @default(autoincrement())
    title            String
    featured         Boolean        @default(false)
    githubUrl        String
    liveUrl          String?
    description      String         @db.Text
    problem          String         @db.Text
    solution         String         @db.Text
    story            String         @db.Text
    technologies     String[]
    featuredImageSrc String
    featuredImageAlt String
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
    galleryImages    GalleryImage[]
}

model GalleryImage {
    id        Int      @id @default(autoincrement())
    imagePath String
    projectId Int
    project   Project  @relation(fields: [projectId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
